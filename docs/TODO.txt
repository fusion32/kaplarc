- network output:
	-- no output message pool
	-- each connection have a double buffered output
	-- the output buffers are swapped at a given rate (network output rate) but not before all writes have been processed (network output flush)
	-- if the output buffer gets full before the swap, then:
		--- the acquisition of a slice should block until the network output flush (this should be a parameter in the dispatcher to avoid server freeze)
		--- if this gets often, the connection buffer should be increased or the output rate should be increased
	-- the server should always operate with the maximum output rate to avoid the previous problem
- network input:
	-- analogous to the output, the input will be double buffered as well, but the buffers will be swapped at an independent rate (network input rate) but not before all input has been processed (network input flush)
- networking:
	-- the previous points could be easier to implement in a UDP server but we'll see how it turns out
	-- IMPORTANT: as there is essentially two threads of execution (networking and dispatcher) the double buffering will fit just perfectly as there will be a single writer and a single reader in both output and input
	-- when i implement zone sharding, this will essentially be the same as the connections will be tied to a single dispatcher
- scripting:
	-- i have researched a bit on this topic and considered the following options: lua, luajit, python, ruby, julia, and javascript
	-- julia seemed like a good option but i still have to research more on this
	-- NOTE: we must be careful with lua/luajit not to accept lua bytecode as input as there are some security flaws
- crypto:
	-- the use of libcrypto might be a better option
